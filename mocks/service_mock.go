// Code generated by MockGen. DO NOT EDIT.
// Source: service/service.go

// Package mock_service is a generated GoMock package.
package mocks

import (
	entity "CAKE-STORE/entity"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCakeService is a mock of CakeService interface.
type MockCakeService struct {
	ctrl     *gomock.Controller
	recorder *MockCakeServiceMockRecorder
}

// MockCakeServiceMockRecorder is the mock recorder for MockCakeService.
type MockCakeServiceMockRecorder struct {
	mock *MockCakeService
}

// NewMockCakeService creates a new mock instance.
func NewMockCakeService(ctrl *gomock.Controller) *MockCakeService {
	mock := &MockCakeService{ctrl: ctrl}
	mock.recorder = &MockCakeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCakeService) EXPECT() *MockCakeServiceMockRecorder {
	return m.recorder
}

// AddNewCake mocks base method.
func (m *MockCakeService) AddNewCake(ctx context.Context, cake entity.Cake) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewCake", ctx, cake)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewCake indicates an expected call of AddNewCake.
func (mr *MockCakeServiceMockRecorder) AddNewCake(ctx, cake interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewCake", reflect.TypeOf((*MockCakeService)(nil).AddNewCake), ctx, cake)
}

// DeleteCake mocks base method.
func (m *MockCakeService) DeleteCake(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCake", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCake indicates an expected call of DeleteCake.
func (mr *MockCakeServiceMockRecorder) DeleteCake(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCake", reflect.TypeOf((*MockCakeService)(nil).DeleteCake), ctx, id)
}

// DetailCake mocks base method.
func (m *MockCakeService) DetailCake(ctx context.Context, id int) (entity.Cake, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetailCake", ctx, id)
	ret0, _ := ret[0].(entity.Cake)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetailCake indicates an expected call of DetailCake.
func (mr *MockCakeServiceMockRecorder) DetailCake(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetailCake", reflect.TypeOf((*MockCakeService)(nil).DetailCake), ctx, id)
}

// ListCake mocks base method.
func (m *MockCakeService) ListCake(ctx context.Context, title string) ([]entity.ListCake, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCake", ctx, title)
	ret0, _ := ret[0].([]entity.ListCake)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCake indicates an expected call of ListCake.
func (mr *MockCakeServiceMockRecorder) ListCake(ctx, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCake", reflect.TypeOf((*MockCakeService)(nil).ListCake), ctx, title)
}

// UpdateCake mocks base method.
func (m *MockCakeService) UpdateCake(ctx context.Context, id int, cake entity.Cake) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCake", ctx, id, cake)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCake indicates an expected call of UpdateCake.
func (mr *MockCakeServiceMockRecorder) UpdateCake(ctx, id, cake interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCake", reflect.TypeOf((*MockCakeService)(nil).UpdateCake), ctx, id, cake)
}

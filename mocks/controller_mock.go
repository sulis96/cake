// Code generated by MockGen. DO NOT EDIT.
// Source: controller/controller.go

// Package mock_controller is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	httprouter "github.com/julienschmidt/httprouter"
)

// MockCakeController is a mock of CakeController interface.
type MockCakeController struct {
	ctrl     *gomock.Controller
	recorder *MockCakeControllerMockRecorder
}

// MockCakeControllerMockRecorder is the mock recorder for MockCakeController.
type MockCakeControllerMockRecorder struct {
	mock *MockCakeController
}

// NewMockCakeController creates a new mock instance.
func NewMockCakeController(ctrl *gomock.Controller) *MockCakeController {
	mock := &MockCakeController{ctrl: ctrl}
	mock.recorder = &MockCakeControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCakeController) EXPECT() *MockCakeControllerMockRecorder {
	return m.recorder
}

// AddNewCake mocks base method.
func (m *MockCakeController) AddNewCake(w http.ResponseWriter, r *http.Request, p httprouter.Params) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddNewCake", w, r, p)
}

// AddNewCake indicates an expected call of AddNewCake.
func (mr *MockCakeControllerMockRecorder) AddNewCake(w, r, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewCake", reflect.TypeOf((*MockCakeController)(nil).AddNewCake), w, r, p)
}

// DeleteCake mocks base method.
func (m *MockCakeController) DeleteCake(w http.ResponseWriter, r *http.Request, p httprouter.Params) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteCake", w, r, p)
}

// DeleteCake indicates an expected call of DeleteCake.
func (mr *MockCakeControllerMockRecorder) DeleteCake(w, r, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCake", reflect.TypeOf((*MockCakeController)(nil).DeleteCake), w, r, p)
}

// DetailCake mocks base method.
func (m *MockCakeController) DetailCake(w http.ResponseWriter, r *http.Request, p httprouter.Params) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DetailCake", w, r, p)
}

// DetailCake indicates an expected call of DetailCake.
func (mr *MockCakeControllerMockRecorder) DetailCake(w, r, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetailCake", reflect.TypeOf((*MockCakeController)(nil).DetailCake), w, r, p)
}

// ListCake mocks base method.
func (m *MockCakeController) ListCake(w http.ResponseWriter, r *http.Request, p httprouter.Params) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListCake", w, r, p)
}

// ListCake indicates an expected call of ListCake.
func (mr *MockCakeControllerMockRecorder) ListCake(w, r, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCake", reflect.TypeOf((*MockCakeController)(nil).ListCake), w, r, p)
}

// UpdateCake mocks base method.
func (m *MockCakeController) UpdateCake(w http.ResponseWriter, r *http.Request, p httprouter.Params) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateCake", w, r, p)
}

// UpdateCake indicates an expected call of UpdateCake.
func (mr *MockCakeControllerMockRecorder) UpdateCake(w, r, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCake", reflect.TypeOf((*MockCakeController)(nil).UpdateCake), w, r, p)
}

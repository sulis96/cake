// Code generated by MockGen. DO NOT EDIT.
// Source: repository/repository.go

// Package mock_repository is a generated GoMock package.
package mocks

import (
	entity "CAKE-STORE/entity"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCakeRepository is a mock of CakeRepository interface.
type MockCakeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCakeRepositoryMockRecorder
}

// MockCakeRepositoryMockRecorder is the mock recorder for MockCakeRepository.
type MockCakeRepositoryMockRecorder struct {
	mock *MockCakeRepository
}

// NewMockCakeRepository creates a new mock instance.
func NewMockCakeRepository(ctrl *gomock.Controller) *MockCakeRepository {
	mock := &MockCakeRepository{ctrl: ctrl}
	mock.recorder = &MockCakeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCakeRepository) EXPECT() *MockCakeRepositoryMockRecorder {
	return m.recorder
}

// DeleteCake mocks base method.
func (m *MockCakeRepository) DeleteCake(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCake", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCake indicates an expected call of DeleteCake.
func (mr *MockCakeRepositoryMockRecorder) DeleteCake(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCake", reflect.TypeOf((*MockCakeRepository)(nil).DeleteCake), ctx, id)
}

// GetDetailCake mocks base method.
func (m *MockCakeRepository) GetDetailCake(ctx context.Context, id int) (entity.Cake, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailCake", ctx, id)
	ret0, _ := ret[0].(entity.Cake)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailCake indicates an expected call of GetDetailCake.
func (mr *MockCakeRepositoryMockRecorder) GetDetailCake(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailCake", reflect.TypeOf((*MockCakeRepository)(nil).GetDetailCake), ctx, id)
}

// GetListCake mocks base method.
func (m *MockCakeRepository) GetListCake(ctx context.Context, title string) ([]entity.ListCake, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListCake", ctx, title)
	ret0, _ := ret[0].([]entity.ListCake)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListCake indicates an expected call of GetListCake.
func (mr *MockCakeRepositoryMockRecorder) GetListCake(ctx, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListCake", reflect.TypeOf((*MockCakeRepository)(nil).GetListCake), ctx, title)
}

// InsertCake mocks base method.
func (m *MockCakeRepository) InsertCake(ctx context.Context, cake entity.Cake) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCake", ctx, cake)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertCake indicates an expected call of InsertCake.
func (mr *MockCakeRepositoryMockRecorder) InsertCake(ctx, cake interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCake", reflect.TypeOf((*MockCakeRepository)(nil).InsertCake), ctx, cake)
}

// UpdateCake mocks base method.
func (m *MockCakeRepository) UpdateCake(ctx context.Context, id int, cake entity.Cake) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCake", ctx, id, cake)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCake indicates an expected call of UpdateCake.
func (mr *MockCakeRepositoryMockRecorder) UpdateCake(ctx, id, cake interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCake", reflect.TypeOf((*MockCakeRepository)(nil).UpdateCake), ctx, id, cake)
}
